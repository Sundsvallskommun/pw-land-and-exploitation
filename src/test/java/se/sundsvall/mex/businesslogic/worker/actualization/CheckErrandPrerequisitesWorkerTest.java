package se.sundsvall.mex.businesslogic.worker.actualization;

import static generated.se.sundsvall.casedata.StakeholderDTO.RolesEnum.CONTROL_OFFICIAL;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_ASSIGNED_TO_CONTROL_OFFICIAL;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_CASE_NUMBER;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_ACTION;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_STATUS;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_REQUEST_ID;
import static se.sundsvall.mex.Constants.CASEDATA_KEY_PHASE_ACTION;
import static se.sundsvall.mex.Constants.FALSE;
import static se.sundsvall.mex.Constants.PHASE_ACTION_CANCEL;
import static se.sundsvall.mex.Constants.PHASE_STATUS_CANCELED;
import static se.sundsvall.mex.Constants.UPDATE_AVAILABLE;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.stereotype.Component;
import org.zalando.problem.Problem;
import org.zalando.problem.Status;

import generated.se.sundsvall.casedata.ErrandDTO;
import generated.se.sundsvall.casedata.StakeholderDTO;
import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@ExtendWith(MockitoExtension.class)
class CheckErrandPrerequisitesWorkerTest {

	private static final String PROCESS_INSTANCE_ID = UUID.randomUUID().toString();
	private static final String REQUEST_ID = "RequestId";
	private static final long ERRAND_ID = 123L;

	@Mock
	private CamundaClient camundaClientMock;

	@Mock
	private CaseDataClient caseDataClientMock;

	@Mock
	private ExternalTask externalTaskMock;

	@Mock
	private ExternalTaskService externalTaskServiceMock;

	@Mock
	private FailureHandler failureHandlerMock;

	@Mock
	private ErrandDTO errandMock;

	@Mock
	private StakeholderDTO stakeholderMock;

	@InjectMocks
	private CheckErrandPrerequisitesWorker worker;

	@Captor
	private ArgumentCaptor<Map<String, Object>> variablesCaptor;

	@Test
	void verifyAnnotations() {
		assertThat(worker.getClass()).hasAnnotations(Component.class, ExternalTaskSubscription.class);
		assertThat(worker.getClass().getAnnotation(ExternalTaskSubscription.class).value()).isEqualTo("CheckErrandPrerequisitesTask");
	}

	@Test
	void executeWhenCanceled() {

		// Mock
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		when(errandMock.getExtraParameters()).thenReturn(Map.of(CASEDATA_KEY_PHASE_ACTION, PHASE_ACTION_CANCEL));

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Verify and assert
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock);
		verifyNoInteractions(failureHandlerMock);

		assertThat(variablesCaptor.getValue()).containsExactlyInAnyOrderEntriesOf(Map.of(
			CAMUNDA_VARIABLE_ASSIGNED_TO_CONTROL_OFFICIAL, false,
			CAMUNDA_VARIABLE_PHASE_ACTION, PHASE_ACTION_CANCEL,
			CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_CANCELED));
	}

	@Test
	void executeWhenErrandHasControlOfficialAssigned() {
		// Mock
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		when(errandMock.getStakeholders()).thenReturn(List.of(stakeholderMock));
		when(stakeholderMock.getRoles()).thenReturn(List.of(CONTROL_OFFICIAL));
		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Verify and assert
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock);
		verifyNoInteractions(failureHandlerMock);

		assertThat(variablesCaptor.getValue()).containsExactlyEntriesOf(
			Map.of(CAMUNDA_VARIABLE_ASSIGNED_TO_CONTROL_OFFICIAL, true));
	}

	@Test
	void executeWhenErrandHasNoControlOfficialAssigned() {
		// Mock
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Verify and assert
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock);
		verifyNoInteractions(failureHandlerMock);

		assertThat(variablesCaptor.getValue()).containsExactlyEntriesOf(
			Map.of(CAMUNDA_VARIABLE_ASSIGNED_TO_CONTROL_OFFICIAL, false));
	}

	@Test
	void executeThrowsException() {
		// Setup
		final var problem = Problem.valueOf(Status.I_AM_A_TEAPOT, "Big and stout");

		// Mock to simulate exception upon updating errand with new status
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		doThrow(problem).when(externalTaskServiceMock).complete(any(), any());

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Verify and assert
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskServiceMock, never()).complete(externalTaskMock);
		verify(failureHandlerMock).handleException(externalTaskServiceMock, externalTaskMock, problem.getMessage());
		verify(externalTaskMock).getId();
		verify(externalTaskMock).getBusinessKey();
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), any());
		verifyNoMoreInteractions(camundaClientMock);
	}
}
