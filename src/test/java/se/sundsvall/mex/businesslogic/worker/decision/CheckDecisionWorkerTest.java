package se.sundsvall.mex.businesslogic.worker.decision;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_CASE_NUMBER;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_FINAL_DECISION;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_IS_APPROVED;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_ACTION;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_STATUS;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_REQUEST_ID;
import static se.sundsvall.mex.Constants.CASEDATA_KEY_PHASE_ACTION;
import static se.sundsvall.mex.Constants.CASEDATA_KEY_PHASE_STATUS;
import static se.sundsvall.mex.Constants.FALSE;
import static se.sundsvall.mex.Constants.PHASE_ACTION_CANCEL;
import static se.sundsvall.mex.Constants.PHASE_ACTION_UNKNOWN;
import static se.sundsvall.mex.Constants.PHASE_STATUS_CANCELED;
import static se.sundsvall.mex.Constants.PHASE_STATUS_WAITING;
import static se.sundsvall.mex.Constants.UPDATE_AVAILABLE;

import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Stream;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.stereotype.Component;
import org.zalando.problem.Problem;
import org.zalando.problem.Status;

import generated.se.sundsvall.casedata.DecisionDTO;
import generated.se.sundsvall.casedata.DecisionDTO.DecisionOutcomeEnum;
import generated.se.sundsvall.casedata.DecisionDTO.DecisionTypeEnum;
import generated.se.sundsvall.casedata.ErrandDTO;
import generated.se.sundsvall.casedata.PatchErrandDTO;
import generated.se.sundsvall.casedata.StakeholderDTO;
import generated.se.sundsvall.casedata.StatusDTO;
import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@ExtendWith(MockitoExtension.class)
class CheckDecisionWorkerTest {

	private static final String PROCESS_INSTANCE_ID = UUID.randomUUID().toString();
	private static final String REQUEST_ID = "RequestId";
	private static final long ERRAND_ID = 123L;

	@Mock
	private CamundaClient camundaClientMock;

	@Mock
	private CaseDataClient caseDataClientMock;

	@Mock
	private ExternalTask externalTaskMock;

	@Mock
	private ExternalTaskService externalTaskServiceMock;

	@Mock
	private FailureHandler failureHandlerMock;

	@Mock
	private ErrandDTO errandMock;

	@Mock
	private StakeholderDTO stakeholderMock;

	@InjectMocks
	private CheckDecisionWorker worker;

	@Captor
	private ArgumentCaptor<PatchErrandDTO> patchCaptor;

	@Captor
	private ArgumentCaptor<Map<String, Object>> variablesCaptor;

	@Test
	void verifyAnnotations() {
		// Assert
		assertThat(worker.getClass()).hasAnnotations(Component.class, ExternalTaskSubscription.class);
		assertThat(worker.getClass().getAnnotation(ExternalTaskSubscription.class).value()).isEqualTo("CheckDecisionTask");
	}

	@Test
	void executeWhenCanceled() {
		// Arrange
		final var externalCaseId = UUID.randomUUID().toString();
		final var phase = "phase";

		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		when(errandMock.getExtraParameters()).thenReturn(Map.of(CASEDATA_KEY_PHASE_ACTION, PHASE_ACTION_CANCEL));
		when(errandMock.getExternalCaseId()).thenReturn(externalCaseId);
		when(errandMock.getPhase()).thenReturn(phase);

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Verify and assert
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(caseDataClientMock).patchErrand(eq(ERRAND_ID), patchCaptor.capture());
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock, externalTaskServiceMock);
		verifyNoInteractions(failureHandlerMock);

		// Assert and verify
		assertThat(patchCaptor.getValue()).hasAllNullFieldsOrPropertiesExcept("externalCaseId", "phase", "extraParameters").satisfies(patch -> {
			assertThat(patch.getExternalCaseId()).isEqualTo(externalCaseId);
			assertThat(patch.getPhase()).isEqualTo(phase);
			assertThat(patch.getExtraParameters()).containsExactlyInAnyOrderEntriesOf(Map.of(
				CASEDATA_KEY_PHASE_STATUS, PHASE_STATUS_CANCELED,
				CASEDATA_KEY_PHASE_ACTION, PHASE_ACTION_CANCEL));
		});

		assertThat(variablesCaptor.getValue()).containsExactlyInAnyOrderEntriesOf(Map.of(
			CAMUNDA_VARIABLE_PHASE_ACTION, PHASE_ACTION_CANCEL,
			CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_CANCELED));
	}

	@ParameterizedTest
	@ValueSource(strings = { "Beslutad", "Beslut verkställt" })
	void executeWhenNonFinalDesicionAndEarlierStatusIsNotWaiting(String currentStatus) {
		// Arrange
		final var externalCaseId = UUID.randomUUID().toString();
		final var phase = "phase";

		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		when(errandMock.getStatuses()).thenReturn(List.of(new StatusDTO().statusType(currentStatus)));
		when(errandMock.getExternalCaseId()).thenReturn(externalCaseId);
		when(errandMock.getPhase()).thenReturn(phase);

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Assert and verify
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(caseDataClientMock).patchErrand(eq(ERRAND_ID), patchCaptor.capture());
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock, externalTaskServiceMock);
		verifyNoInteractions(failureHandlerMock);

		assertThat(patchCaptor.getValue()).hasAllNullFieldsOrPropertiesExcept("externalCaseId", "phase", "extraParameters").satisfies(patch -> {
			assertThat(patch.getExternalCaseId()).isEqualTo(externalCaseId);
			assertThat(patch.getPhase()).isEqualTo(phase);
			assertThat(patch.getExtraParameters()).containsExactlyInAnyOrderEntriesOf(Map.of(
				CASEDATA_KEY_PHASE_STATUS, PHASE_STATUS_WAITING,
				CASEDATA_KEY_PHASE_ACTION, PHASE_ACTION_UNKNOWN));
		});

		assertThat(variablesCaptor.getValue()).containsExactlyInAnyOrderEntriesOf(Map.of(
			CAMUNDA_VARIABLE_FINAL_DECISION, false,
			CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_WAITING));
	}

	@ParameterizedTest
	@ValueSource(strings = { "Beslutad", "Beslut verkställt" })
	void executeWhenNonFinalDesicionAndCurrentStatusIsWaiting(String currentStatus) {
		// Arrange
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		when(errandMock.getStatuses()).thenReturn(List.of(new StatusDTO().statusType(currentStatus)));
		when(errandMock.getExtraParameters()).thenReturn(Map.of(CASEDATA_KEY_PHASE_STATUS, PHASE_STATUS_WAITING));

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Assert and verify
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock, externalTaskServiceMock);
		verifyNoInteractions(failureHandlerMock);
	}

	@ParameterizedTest
	@MethodSource("executeWhenFinalDesicionArguments")
	void executeWhenFinalDesicion(String currentStatus, boolean approved) {
		// Arrange
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		when(errandMock.getStatuses()).thenReturn(List.of(new StatusDTO().statusType(currentStatus)));
		when(errandMock.getDecisions()).thenReturn(List.of(new DecisionDTO().decisionType(DecisionTypeEnum.FINAL).decisionOutcome(approved ? DecisionOutcomeEnum.APPROVAL : DecisionOutcomeEnum.REJECTION)));

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Assert and verify
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(externalTaskMock).getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
		verify(caseDataClientMock).getErrandById(ERRAND_ID);
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), variablesCaptor.capture());
		verifyNoMoreInteractions(camundaClientMock, externalTaskServiceMock);
		verifyNoInteractions(failureHandlerMock);

		assertThat(variablesCaptor.getValue()).containsExactlyInAnyOrderEntriesOf(Map.of(
			CAMUNDA_VARIABLE_FINAL_DECISION, true,
			CAMUNDA_VARIABLE_IS_APPROVED, approved));
	}

	private static Stream<Arguments> executeWhenFinalDesicionArguments() {
		return Stream.of(
			Arguments.of("Beslutad", true),
			Arguments.of("Beslutad", false),
			Arguments.of("Beslut verkställt", true),
			Arguments.of("Beslut verkställt", false));
	}

	@Test
	void executeThrowsException() {
		// Arrange
		final var problem = Problem.valueOf(Status.I_AM_A_TEAPOT, "Big and stout");

		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(REQUEST_ID);
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(ERRAND_ID);
		when(externalTaskMock.getProcessInstanceId()).thenReturn(PROCESS_INSTANCE_ID);
		when(caseDataClientMock.getErrandById(ERRAND_ID)).thenReturn(errandMock);
		when(errandMock.getId()).thenReturn(ERRAND_ID);
		doThrow(problem).when(externalTaskServiceMock).complete(any(), any());

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Assert and verify
		verify(camundaClientMock).setProcessInstanceVariable(PROCESS_INSTANCE_ID, UPDATE_AVAILABLE, FALSE);
		verify(failureHandlerMock).handleException(externalTaskServiceMock, externalTaskMock, problem.getMessage());
		verify(externalTaskMock).getId();
		verify(externalTaskMock).getBusinessKey();
		verify(externalTaskServiceMock).complete(eq(externalTaskMock), any());
		verifyNoMoreInteractions(camundaClientMock, externalTaskServiceMock);
	}
}
