package se.sundsvall.mex.businesslogic.worker.followup;

import static generated.se.sundsvall.casedata.NoteType.INTERNAL;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_CASE_NUMBER;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_REQUEST_ID;

import java.util.List;
import java.util.UUID;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.stereotype.Component;
import org.zalando.problem.Problem;
import org.zalando.problem.Status;

import generated.se.sundsvall.casedata.NoteDTO;
import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@ExtendWith(MockitoExtension.class)
class CleanupInternalNotesWorkerTest {

	@Mock
	private ExternalTask externalTaskMock;

	@Mock
	private ExternalTaskService externalTaskServiceMock;

	@Mock
	private CaseDataClient caseDataClientMock;

	@Mock
	private FailureHandler failureHandlerMock;

	@InjectMocks
	private CleanUpInternalNotesWorker worker;

	@Test
	void verifyAnnotations() {
		// Assert
		assertThat(worker.getClass()).hasAnnotations(Component.class, ExternalTaskSubscription.class);
		assertThat(worker.getClass().getAnnotation(ExternalTaskSubscription.class).value()).isEqualTo("CleanUpInternalNotesTask");
	}

	@Test
	void execute() {
		// Arrange
		final var caseNumber = 666L;

		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(UUID.randomUUID().toString());
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(caseNumber);
		when(caseDataClientMock.getNotesByErrandId(caseNumber, INTERNAL.getValue())).thenReturn(List.of(new NoteDTO().id(1L), new NoteDTO().id(2L)));

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Assert and verify
		verify(caseDataClientMock).getNotesByErrandId(caseNumber, INTERNAL.getValue());
		verify(caseDataClientMock).deleteNoteById(1L);
		verify(caseDataClientMock).deleteNoteById(2L);
		verify(externalTaskServiceMock).complete(externalTaskMock);
		verifyNoMoreInteractions(caseDataClientMock, externalTaskServiceMock);
		verifyNoInteractions(failureHandlerMock);
	}

	@Test
	void executeThrowsException() {
		// Arrange
		final var caseNumber = 666L;
		final var problem = Problem.valueOf(Status.I_AM_A_TEAPOT, "Big and stout");

		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_REQUEST_ID)).thenReturn(UUID.randomUUID().toString());
		when(externalTaskMock.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER)).thenReturn(caseNumber);
		when(caseDataClientMock.getNotesByErrandId(caseNumber, INTERNAL.getValue())).thenReturn(List.of(new NoteDTO().id(1L), new NoteDTO().id(2L)));
		doThrow(problem).when(caseDataClientMock).deleteNoteById(any());

		// Act
		worker.execute(externalTaskMock, externalTaskServiceMock);

		// Assert and verify
		verify(caseDataClientMock).getNotesByErrandId(caseNumber, INTERNAL.getValue());
		verify(caseDataClientMock).deleteNoteById(1L);
		verify(failureHandlerMock).handleException(externalTaskServiceMock, externalTaskMock, problem.getMessage());
		verifyNoInteractions(externalTaskServiceMock);
	}
}
