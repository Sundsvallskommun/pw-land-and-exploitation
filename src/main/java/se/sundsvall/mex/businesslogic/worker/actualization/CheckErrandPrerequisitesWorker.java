package se.sundsvall.mex.businesslogic.worker.actualization;

import static java.util.Collections.emptyList;
import static java.util.Optional.ofNullable;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_ASSIGNED_TO_ADMINISTRATOR;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_CASE_NUMBER;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_MUNICIPALITY_ID;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_ACTION;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_STATUS;
import static se.sundsvall.mex.Constants.PHASE_ACTION_CANCEL;
import static se.sundsvall.mex.Constants.PHASE_ACTION_UNKNOWN;
import static se.sundsvall.mex.Constants.PHASE_STATUS_CANCELED;
import static se.sundsvall.mex.Constants.PHASE_STATUS_WAITING;

import java.util.HashMap;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.springframework.stereotype.Component;

import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.businesslogic.worker.AbstractWorker;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

import generated.se.sundsvall.casedata.ErrandDTO;
import generated.se.sundsvall.casedata.StakeholderDTO;

@Component
@ExternalTaskSubscription("CheckErrandPrerequisitesTask")
public class CheckErrandPrerequisitesWorker extends AbstractWorker {

	CheckErrandPrerequisitesWorker(CamundaClient camundaClient, CaseDataClient caseDataClient, FailureHandler failureHandler) {
		super(camundaClient, caseDataClient, failureHandler);
	}

	@Override
	public void executeBusinessLogic(ExternalTask externalTask, ExternalTaskService externalTaskService) {
		try {
			logInfo("Execute task for evaluating if prerequisites for updating status of case is met");
			clearUpdateAvailable(externalTask);

			final String municipalityId = externalTask.getVariable(CAMUNDA_VARIABLE_MUNICIPALITY_ID);
			final Long caseNumber = externalTask.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
			final var errand = getErrand(municipalityId, caseNumber);

			final var variables = new HashMap<String, Object>();
			final var administratorAssigned = isAdministratorAssigned(errand);
			variables.put(CAMUNDA_VARIABLE_ASSIGNED_TO_ADMINISTRATOR, administratorAssigned);

			if (isCancelRequested(errand)) {
				logInfo("Cancel has been requested for errand with id {}", errand.getId());

				patchPhaseData(municipalityId, errand, PHASE_ACTION_CANCEL, PHASE_STATUS_CANCELED);
				variables.put(CAMUNDA_VARIABLE_PHASE_ACTION, PHASE_ACTION_CANCEL);
				variables.put(CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_CANCELED);

			} else if (!administratorAssigned) {
				patchPhaseData(municipalityId, errand, PHASE_ACTION_UNKNOWN, PHASE_STATUS_WAITING);
				variables.put(CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_WAITING);
			}

			externalTaskService.complete(externalTask, variables);
		} catch (final Exception exception) {
			logException(externalTask, exception);
			failureHandler.handleException(externalTaskService, externalTask, exception.getMessage());
		}
	}

	private boolean isAdministratorAssigned(ErrandDTO errand) {
		final var isControlOfficialAssigned = ofNullable(errand.getStakeholders()).orElse(emptyList()).stream()
			.map(StakeholderDTO::getRoles)
			.anyMatch(roles -> roles.contains("ADMINISTRATOR"));

		logInfo("Errand with id {} {} been assigned to a control official", errand.getId(), isControlOfficialAssigned ? "has" : "has not yet");
		return isControlOfficialAssigned;
	}
}
