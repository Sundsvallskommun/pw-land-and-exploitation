package se.sundsvall.mex.businesslogic.worker.decision;

import static generated.se.sundsvall.casedata.DecisionDTO.DecisionOutcomeEnum.APPROVAL;
import static generated.se.sundsvall.casedata.DecisionDTO.DecisionTypeEnum.FINAL;
import static java.util.Collections.emptyList;
import static java.util.Optional.ofNullable;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_FINAL_DECISION;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_IS_APPROVED;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_ACTION;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_STATUS;
import static se.sundsvall.mex.Constants.CASEDATA_STATUS_CASE_DECIDED;
import static se.sundsvall.mex.Constants.CASEDATA_STATUS_CASE_DECISION_EXECUTED;
import static se.sundsvall.mex.Constants.PHASE_ACTION_CANCEL;
import static se.sundsvall.mex.Constants.PHASE_ACTION_UNKNOWN;
import static se.sundsvall.mex.Constants.PHASE_STATUS_CANCELED;
import static se.sundsvall.mex.Constants.PHASE_STATUS_WAITING;

import java.util.HashMap;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.springframework.stereotype.Component;

import generated.se.sundsvall.casedata.ErrandDTO;
import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.businesslogic.worker.AbstractWorker;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@Component
@ExternalTaskSubscription("CheckDecisionTask")
public class CheckDecisionWorker extends AbstractWorker {

	CheckDecisionWorker(CamundaClient camundaClient, CaseDataClient caseDataClient, FailureHandler failureHandler) {
		super(camundaClient, caseDataClient, failureHandler);
	}

	@Override
	public void executeBusinessLogic(ExternalTask externalTask, ExternalTaskService externalTaskService) {
		try {
			logInfo("Execute Worker for CheckDecisionTask");
			clearUpdateAvailable(externalTask);

			final var errand = getErrand(externalTask);
			final var variables = new HashMap<String, Object>();

			if (isCancelRequested(errand)) {
				logInfo("Cancel has been requested for errand with id {}", errand.getId());

				variables.put(CAMUNDA_VARIABLE_PHASE_ACTION, PHASE_ACTION_CANCEL);
				variables.put(CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_CANCELED);
				patchPhaseData(errand, PHASE_ACTION_CANCEL, PHASE_STATUS_CANCELED);
			} else if (isDecided(errand) && isFinal(errand)) {
				logInfo("Final decision is made for errand with id {}", errand.getId());

				variables.put(CAMUNDA_VARIABLE_FINAL_DECISION, true);
				variables.put(CAMUNDA_VARIABLE_IS_APPROVED, isApproved(errand));
			} else {
				logInfo("Final decision has not yet been made for errand with id {}", errand.getId());

				variables.put(CAMUNDA_VARIABLE_FINAL_DECISION, false);
				variables.put(CAMUNDA_VARIABLE_PHASE_STATUS, PHASE_STATUS_WAITING);
				patchPhaseDataIfNotEqual(errand, PHASE_ACTION_UNKNOWN, PHASE_STATUS_WAITING);
			}

			externalTaskService.complete(externalTask, variables);
		} catch (Exception exception) {
			logException(externalTask, exception);
			failureHandler.handleException(externalTaskService, externalTask, exception.getMessage());
		}
	}

	private boolean isDecided(final ErrandDTO errand) {
		return ofNullable(errand.getStatuses()).orElse(emptyList()).stream()
			.anyMatch(status -> CASEDATA_STATUS_CASE_DECIDED.equals(status.getStatusType()) || CASEDATA_STATUS_CASE_DECISION_EXECUTED.equals(status.getStatusType()));
	}

	private boolean isFinal(ErrandDTO errand) {
		return ofNullable(errand.getDecisions()).orElse(emptyList()).stream()
			.anyMatch(decision -> FINAL.equals(decision.getDecisionType()));
	}

	private boolean isApproved(ErrandDTO errand) {
		return ofNullable(errand.getDecisions()).orElse(emptyList()).stream()
			.anyMatch(decision -> APPROVAL.equals(decision.getDecisionOutcome()));
	}
}
