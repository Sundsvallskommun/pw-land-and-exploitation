package se.sundsvall.mex.businesslogic.worker.followup;

import static generated.se.sundsvall.casedata.NoteType.INTERNAL;
import static java.util.Collections.emptyList;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_CASE_NUMBER;

import java.util.Optional;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.springframework.stereotype.Component;

import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.businesslogic.worker.AbstractWorker;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@Component
@ExternalTaskSubscription("CleanUpInternalNotesTask")
public class CleanUpInternalNotesWorker extends AbstractWorker {

	CleanUpInternalNotesWorker(CamundaClient camundaClient, CaseDataClient caseDataClient, FailureHandler failureHandler) {
		super(camundaClient, caseDataClient, failureHandler);
	}

	@Override
	public void executeBusinessLogic(ExternalTask externalTask, ExternalTaskService externalTaskService) {
		try {
			logInfo("Execute Worker for CleanUpInternalNotesTask");

			final var notes = caseDataClient.getNotesByErrandId(externalTask.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER), INTERNAL.getValue());
			Optional.ofNullable(notes).orElse(emptyList())
				.forEach(internalNote -> caseDataClient.deleteNoteById(internalNote.getId()));

			externalTaskService.complete(externalTask);
		} catch (Exception exception) {
			logException(externalTask, exception);
			failureHandler.handleException(externalTaskService, externalTask, exception.getMessage());
		}
	}
}
