package se.sundsvall.mex.businesslogic.worker;

import static java.util.Optional.ofNullable;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_CASE_NUMBER;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_MUNICIPALITY_ID;
import static se.sundsvall.mex.Constants.CAMUNDA_VARIABLE_PHASE_ACTION;
import static se.sundsvall.mex.Constants.CASEDATA_KEY_PHASE_ACTION;
import static se.sundsvall.mex.Constants.PHASE_ACTION_CANCEL;
import static se.sundsvall.mex.Constants.PHASE_ACTION_COMPLETE;
import static se.sundsvall.mex.Constants.PHASE_ACTION_UNKNOWN;
import static se.sundsvall.mex.Constants.PHASE_STATUS_CANCELED;
import static se.sundsvall.mex.Constants.PHASE_STATUS_COMPLETED;
import static se.sundsvall.mex.Constants.PHASE_STATUS_WAITING;

import java.util.HashMap;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.springframework.stereotype.Component;

import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@Component
@ExternalTaskSubscription("CheckPhaseActionTask")
public class CheckPhaseActionWorker extends AbstractWorker {

	CheckPhaseActionWorker(CamundaClient camundaClient, CaseDataClient caseDataClient, FailureHandler failureHandler) {
		super(camundaClient, caseDataClient, failureHandler);
	}

	@Override
	public void executeBusinessLogic(ExternalTask externalTask, ExternalTaskService externalTaskService) {
		try {
			logInfo("Execute task for evaluating phase action");
			clearUpdateAvailable(externalTask);

			final String municipalityId = externalTask.getVariable(CAMUNDA_VARIABLE_MUNICIPALITY_ID);
			final Long caseNumber = externalTask.getVariable(CAMUNDA_VARIABLE_CASE_NUMBER);
			final var errand = getErrand(municipalityId, caseNumber);

			final var phaseAction = ofNullable(errand.getExtraParameters())
				.map(extraParameters -> extraParameters.get(CASEDATA_KEY_PHASE_ACTION))
				.orElse(PHASE_ACTION_UNKNOWN);

			switch (phaseAction) {
				case PHASE_ACTION_COMPLETE ->
					patchPhaseData(municipalityId, errand, phaseAction, PHASE_STATUS_COMPLETED);
				case PHASE_ACTION_CANCEL ->
					patchPhaseData(municipalityId, errand, phaseAction, PHASE_STATUS_CANCELED);
				default ->
					patchPhaseDataIfNotEqual(municipalityId, errand, phaseAction, PHASE_STATUS_WAITING);
			}

			final var variables = new HashMap<String, Object>();
			variables.put(CAMUNDA_VARIABLE_PHASE_ACTION, phaseAction);

			externalTaskService.complete(externalTask, variables);
		} catch (final Exception exception) {
			logException(externalTask, exception);
			failureHandler.handleException(externalTaskService, externalTask, exception.getMessage());
		}
	}
}
