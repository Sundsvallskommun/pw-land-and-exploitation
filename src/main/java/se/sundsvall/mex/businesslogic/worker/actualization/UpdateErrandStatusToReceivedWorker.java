package se.sundsvall.mex.businesslogic.worker.actualization;

import static se.sundsvall.mex.Constants.CASEDATA_STATUS_CASE_RECEIVED;
import static se.sundsvall.mex.integration.casedata.mapper.CaseDataMapper.toStatus;

import java.util.ArrayList;
import java.util.Optional;

import org.camunda.bpm.client.spring.annotation.ExternalTaskSubscription;
import org.camunda.bpm.client.task.ExternalTask;
import org.camunda.bpm.client.task.ExternalTaskService;
import org.springframework.stereotype.Component;

import se.sundsvall.mex.businesslogic.handler.FailureHandler;
import se.sundsvall.mex.businesslogic.worker.AbstractWorker;
import se.sundsvall.mex.integration.camunda.CamundaClient;
import se.sundsvall.mex.integration.casedata.CaseDataClient;

@Component
@ExternalTaskSubscription("UpdateErrandStatusToReceivedTask")
public class UpdateErrandStatusToReceivedWorker extends AbstractWorker {

	UpdateErrandStatusToReceivedWorker(CamundaClient camundaClient, CaseDataClient caseDataClient, FailureHandler failureHandler) {
		super(camundaClient, caseDataClient, failureHandler);
	}

	@Override
	public void executeBusinessLogic(ExternalTask externalTask, ExternalTaskService externalTaskService) {
		try {
			final var errand = getErrand(externalTask);
			logInfo("Executing update of status for errand with id {} to {}", errand.getId(), CASEDATA_STATUS_CASE_RECEIVED);

			final var statuses = Optional.ofNullable(errand.getStatuses()).orElse(new ArrayList<>());
			final var caseStatusReceivedExists = statuses.stream().anyMatch(status -> CASEDATA_STATUS_CASE_RECEIVED.equals(status.getStatusType()));

			if (!caseStatusReceivedExists) {
				statuses.add(toStatus(CASEDATA_STATUS_CASE_RECEIVED, CASEDATA_STATUS_CASE_RECEIVED));
				caseDataClient.putStatus(errand.getId(), statuses);
			} else {
				logInfo("Errand with id {} already has status {}", errand.getId(), CASEDATA_STATUS_CASE_RECEIVED);
			}

			externalTaskService.complete(externalTask);
		} catch (final Exception exception) {
			logException(externalTask, exception);
			failureHandler.handleException(externalTaskService, externalTask, exception.getMessage());
		}
	}
}
