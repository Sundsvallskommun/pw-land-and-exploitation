package apptest;

import static generated.se.sundsvall.camunda.HistoricProcessInstanceDto.StateEnum.COMPLETED;
import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.tuple;
import static org.awaitility.Awaitility.await;
import static org.awaitility.Awaitility.setDefaultPollDelay;
import static org.awaitility.Awaitility.setDefaultPollInterval;
import static org.awaitility.Awaitility.setDefaultTimeout;
import static org.hamcrest.Matchers.equalTo;
import static org.springframework.http.HttpMethod.POST;
import static org.springframework.http.HttpStatus.ACCEPTED;

import java.time.Duration;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import se.sundsvall.dept44.test.annotation.wiremock.WireMockAppTestSuite;
import se.sundsvall.mex.Application;
import se.sundsvall.mex.api.model.StartProcessResponse;
import se.sundsvall.mex.integration.camunda.CamundaClient;

import generated.se.sundsvall.camunda.HistoricActivityInstanceDto;

@WireMockAppTestSuite(files = "classpath:/CreateProcess/", classes = Application.class)
class CreateProcessIT extends AbstractCamundaAppTest {
	private static final int DEFAULT_TESTCASE_TIMEOUT_IN_SECONDS = 30;
	private static final String MUNICIPALITY_ID = "/2281";

	@Autowired
	private CamundaClient camundaClient;

	@BeforeEach
	void setup() {
		setDefaultPollInterval(500, MILLISECONDS);
		setDefaultPollDelay(Duration.ZERO);
		setDefaultTimeout(Duration.ofSeconds(DEFAULT_TESTCASE_TIMEOUT_IN_SECONDS));

		await()
			.ignoreExceptions()
			.until(() -> camundaClient.getDeployments("process-land-and-exploitation.bpmn", null, null).size(), equalTo(1));

		verifyAllStubs();
	}

	@Test
	void test001_createProcess() throws JsonProcessingException, ClassNotFoundException {

		// === Start process ===
		final var startResponse = setupCall()
			.withServicePath(MUNICIPALITY_ID + "/process/start/406")
			.withHttpMethod(POST)
			.withExpectedResponseStatus(ACCEPTED)
			.sendRequest()
			.andReturnBody(StartProcessResponse.class);

		// Wait for process to be waiting for update of prerequisites in actualization phase and execute update
		awaitActivity("actualization_is_prerequisites_update_available", startResponse.getProcessId());

		// Wait for process to be waiting for update of errand in actualization phase and execute update
		awaitActivity("actualization_is_case_update_available", startResponse.getProcessId());

		// Wait for process to be waiting for update of errand in investigation phase and execute update
		awaitActivity("investigation_is_case_update_available", startResponse.getProcessId());

		// Wait for process to be waiting for update of errand in decision phase and execute update
		awaitActivity("decision_is_case_update_available", startResponse.getProcessId());

		// Wait for process to be waiting for update of errand in followup phase and execute update
		awaitActivity("followup_is_case_update_available", startResponse.getProcessId());

		// Wait for process to finish
		await()
			.ignoreExceptions()
			.atMost(DEFAULT_TESTCASE_TIMEOUT_IN_SECONDS, SECONDS)
			.until(() -> camundaClient.getHistoricProcessInstance(startResponse.getProcessId()).getState(), equalTo(COMPLETED));

		// Verify mocked stubs
		verifyAllStubs();

		// Verify process pathway.
		assertThat(getProcessInstanceRoute(startResponse.getProcessId()))
			.extracting(HistoricActivityInstanceDto::getActivityName, HistoricActivityInstanceDto::getActivityId)
			.containsExactlyInAnyOrder(
				// At start of process
				tuple("Start process", "start_process"),

				// Actualization
				tuple("Actualization", "call_actualization_phase"),
				tuple("Start actualization phase", "start_actualization_phase"),
				tuple("Update phase", "external_task_actualization_update_phase_to_registered"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_received"),
				tuple("Check errand prerequisites", "external_task_actualization_check_errand_prerequisites"),
				tuple("Is prerequisites met?", "gateway_actualization_is_prerequisites_met"), // Control official not yet assigned to case
				tuple("Is caseUpdateAvailable", "actualization_is_prerequisites_update_available"), // Wait for update
				tuple("Check errand prerequisites", "external_task_actualization_check_errand_prerequisites"),
				tuple("Is prerequisites met?", "gateway_actualization_is_prerequisites_met"), // Control official assigned to case
				tuple("Update phase", "external_task_actualization_update_phase_to_review"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_under_review"),
				tuple("Check phase action", "external_task_actualization_check_phase_action"),
				tuple("Is phase action present?", "gateway_actualization_is_phase_action_present"), // Phase action not equal to CANCEL or COMPLETE
				tuple("Is caseUpdateAvailable", "actualization_is_case_update_available"), // Wait for update
				tuple("Check phase action", "external_task_actualization_check_phase_action"),
				tuple("Is phase action present?", "gateway_actualization_is_phase_action_present"), // Phase action equal to COMPLETE
				tuple("End actualization phase when completed", "end_actualization_phase_as_completed"),

				// GW "Is canceled in actualization phase"
				tuple("Is canceled in actualization phase", "gateway_canceled_in_actualization_phase"),

				// Investigation
				tuple("Investigation", "call_investigation_phase"),
				tuple("Start investigation phase", "start_investigation_phase"),
				tuple("Update phase", "external_task_investigation_update_phase"),
				tuple("Update errand status", "external_task_investigation_update_errand_status"),
				tuple("Check phase action", "external_task_investigation_check_phase_action"),
				tuple("Is phase action present?", "gateway_investigation_is_phase_action_present"), // Phase action not equal to CANCEL or COMPLETE
				tuple("Is caseUpdateAvailable", "investigation_is_case_update_available"), // Wait for update
				tuple("Check phase action", "external_task_investigation_check_phase_action"),
				tuple("Is phase action present?", "gateway_investigation_is_phase_action_present"), // Phase action equal to COMPLETE
				tuple("End investigation phase when completed", "end_investigation_phase_as_completed"),

				// GW "Is canceled in investigation phase"
				tuple("Is canceled in investigation phase", "gateway_canceled_in_investigation_phase"),

				// Decision
				tuple("Decision", "call_decision_phase"),
				tuple("Start decision phase", "start_decision_phase"),
				tuple("Update phase", "external_task_decision_update_phase"),
				tuple("Update errand status", "external_task_decision_update_errand_status"),
				tuple("Check if decision is made", "external_task_decision_check_decision"),
				tuple("Is final decision made or is process canceled?", "gateway_is_decision_final_or_process_canceled"), // Final decision is not yet made
				tuple("Is caseUpdateAvailable", "decision_is_case_update_available"), // Wait for update
				tuple("Check if decision is made", "external_task_decision_check_decision"),
				tuple("Is final decision made or is process canceled?", "gateway_is_decision_final_or_process_canceled"), // Final decision is made
				tuple("End decision phase with final decision", "end_decision_phase_with_final_decision"),

				// GW "Is canceled in decision phase"
				tuple("Is canceled in decision phase", "gateway_canceled_in_decision_phase"),

				// Handling
				tuple("Handling", "call_handling_phase"),
				tuple("Start handling phase", "start_handling_phase"),
				tuple("End handling phase", "end_handling_phase"),

				// Execution
				tuple("Execution", "call_execution_phase"),
				tuple("Start execution phase", "start_execution_phase"),
				tuple("Update phase", "external_task_execution_update_phase"),
				tuple("End execution phase", "end_execution_phase"),

				// Follow up
				tuple("Follow up", "call_follow_up_phase"),
				tuple("Start follow up phase", "start_follow_up_phase"),
				tuple("Update phase", "external_task_followup_update_phase"),
				tuple("Check phase action", "external_task_followup_check_phase_action"),
				tuple("Is phase action present?", "gateway_followup_is_phase_action_present"), // Phase action not equal to COMPLETE
				tuple("Is caseUpdateAvailable", "followup_is_case_update_available"), // Wait for update
				tuple("Check phase action", "external_task_followup_check_phase_action"),
				tuple("Is phase action present?", "gateway_followup_is_phase_action_present"), // Phase action equals COMPLETE
				tuple("Clean up internal notes", "external_task_followup_clean_up_notes"),
				tuple("Update errand status", "external_task_followup_update_errand_status"),
				tuple("End follow up phase", "end_follow_up_phase"),

				// At end of process
				tuple("Finalize process", "external_task_finalize_process"),
				tuple("End process", "end_process"));
	}

	@Test
	void test002_createProcessCanceledAtPrerequisiteStepInActualizationPhase() throws JsonProcessingException, ClassNotFoundException {
		// === Start process ===
		final var startResponse = setupCall()
			.withServicePath(MUNICIPALITY_ID + "/process/start/407")
			.withHttpMethod(POST)
			.withExpectedResponseStatus(ACCEPTED)
			.sendRequest()
			.andReturnBody(StartProcessResponse.class);

		await()
			.ignoreExceptions()
			.atMost(DEFAULT_TESTCASE_TIMEOUT_IN_SECONDS, SECONDS)
			.until(() -> camundaClient.getHistoricProcessInstance(startResponse.getProcessId()).getState(), equalTo(COMPLETED));

		// Verify mocked stubs
		verifyAllStubs();

		// Verify process pathway.
		assertThat(getProcessInstanceRoute(startResponse.getProcessId()))
			.extracting(HistoricActivityInstanceDto::getActivityName, HistoricActivityInstanceDto::getActivityId)
			.doesNotHaveDuplicates()
			.containsExactlyInAnyOrder(

				tuple("Start process", "start_process"),

				// Actualization
				tuple("Start actualization phase", "start_actualization_phase"),
				tuple("Update phase", "external_task_actualization_update_phase_to_registered"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_received"),
				tuple("Check errand prerequisites", "external_task_actualization_check_errand_prerequisites"),
				tuple("Is prerequisites met?", "gateway_actualization_is_prerequisites_met"),
				tuple("End actualization phase when canceled", "end_actualization_phase_as_canceled"),
				tuple("Actualization", "call_actualization_phase"),
				tuple("Is canceled in actualization phase", "gateway_canceled_in_actualization_phase"),

				// Canceled
				tuple("Canceled", "call_canceled_phase"),
				tuple("Start canceled phase", "start_canceled_phase"),
				tuple("Update phase", "external_task_canceled_update_phase_to_canceled"),
				tuple("Update errand status", "external_task_canceled_update_errand_status_to_canceled"),
				tuple("Clean up internal notes", "external_task_canceled_clean_up_notes"),
				tuple("End canceled phase", "end_canceled_phase"),


				// At end of process
				tuple("End process", "end_process"));
	}

	@Test
	void test003_createProcessCanceledAtPhaseActionStepInActualizationPhase() throws JsonProcessingException, ClassNotFoundException {
		// === Start process ===
		final var startResponse = setupCall()
			.withServicePath(MUNICIPALITY_ID + "/process/start/407")
			.withHttpMethod(POST)
			.withExpectedResponseStatus(ACCEPTED)
			.sendRequest()
			.andReturnBody(StartProcessResponse.class);

		await()
			.ignoreExceptions()
			.atMost(DEFAULT_TESTCASE_TIMEOUT_IN_SECONDS, SECONDS)
			.until(() -> camundaClient.getHistoricProcessInstance(startResponse.getProcessId()).getState(), equalTo(COMPLETED));

		// Verify mocked stubs
		verifyAllStubs();

		// Verify process pathway.
		assertThat(getProcessInstanceRoute(startResponse.getProcessId()))
			.extracting(HistoricActivityInstanceDto::getActivityName, HistoricActivityInstanceDto::getActivityId)
			.doesNotHaveDuplicates()
			.containsExactlyInAnyOrder(

				tuple("Start process", "start_process"),

				// Actualization
				tuple("Start actualization phase", "start_actualization_phase"),
				tuple("Update phase", "external_task_actualization_update_phase_to_registered"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_received"),
				tuple("Check errand prerequisites", "external_task_actualization_check_errand_prerequisites"),
				tuple("Is prerequisites met?", "gateway_actualization_is_prerequisites_met"),
				tuple("Update phase", "external_task_actualization_update_phase_to_review"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_under_review"),
				tuple("Check phase action", "external_task_actualization_check_phase_action"),
				tuple("Is phase action present?", "gateway_actualization_is_phase_action_present"),
				tuple("End actualization phase when canceled", "end_actualization_phase_as_canceled"),
				tuple("Actualization", "call_actualization_phase"),
				tuple("Is canceled in actualization phase", "gateway_canceled_in_actualization_phase"),

				// Canceled
				tuple("Canceled", "call_canceled_phase"),
				tuple("Start canceled phase", "start_canceled_phase"),
				tuple("Update phase", "external_task_canceled_update_phase_to_canceled"),
				tuple("Update errand status", "external_task_canceled_update_errand_status_to_canceled"),
				tuple("Clean up internal notes", "external_task_canceled_clean_up_notes"),
				tuple("End canceled phase", "end_canceled_phase"),


				// At end of process
				tuple("End process", "end_process"));
	}

	@Test
	void test004_createProcessCanceledInInvestigationPhase() throws JsonProcessingException, ClassNotFoundException {

		// === Start process ===
		final var startResponse = setupCall()
			.withServicePath(MUNICIPALITY_ID + "/process/start/408")
			.withHttpMethod(POST)
			.withExpectedResponseStatus(ACCEPTED)
			.sendRequest()
			.andReturnBody(StartProcessResponse.class);

		await()
			.until(() -> camundaClient.getHistoricProcessInstance(startResponse.getProcessId()).getState(), equalTo(COMPLETED));

		// Verify mocked stubs
		verifyAllStubs();

		// Verify process pathway.
		assertThat(getProcessInstanceRoute(startResponse.getProcessId()))
			.extracting(HistoricActivityInstanceDto::getActivityName, HistoricActivityInstanceDto::getActivityId)
			.doesNotHaveDuplicates()
			.containsExactlyInAnyOrder(
				tuple("Start process", "start_process"),

				// Actualization
				tuple("Start actualization phase", "start_actualization_phase"),
				tuple("Update phase", "external_task_actualization_update_phase_to_registered"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_received"),
				tuple("Check errand prerequisites", "external_task_actualization_check_errand_prerequisites"),
				tuple("Is prerequisites met?", "gateway_actualization_is_prerequisites_met"),
				tuple("Update phase", "external_task_actualization_update_phase_to_review"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_under_review"),
				tuple("Check phase action", "external_task_actualization_check_phase_action"),
				tuple("Is phase action present?", "gateway_actualization_is_phase_action_present"),
				tuple("End actualization phase when completed", "end_actualization_phase_as_completed"),
				tuple("Actualization", "call_actualization_phase"),
				tuple("Is canceled in actualization phase", "gateway_canceled_in_actualization_phase"),

				// Investigation
				tuple("Start investigation phase", "start_investigation_phase"),
				tuple("Update phase", "external_task_investigation_update_phase"),
				tuple("Update errand status", "external_task_investigation_update_errand_status"),
				tuple("Check phase action", "external_task_investigation_check_phase_action"),
				tuple("Is phase action present?", "gateway_investigation_is_phase_action_present"),
				tuple("Investigation", "call_investigation_phase"),
				tuple("End investigation phase when canceled", "end_investigation_phase_as_canceled"),
				tuple("Is canceled in investigation phase", "gateway_canceled_in_investigation_phase"),

				// Canceled
				tuple("Canceled", "call_canceled_phase"),
				tuple("Start canceled phase", "start_canceled_phase"),
				tuple("Update phase", "external_task_canceled_update_phase_to_canceled"),
				tuple("Update errand status", "external_task_canceled_update_errand_status_to_canceled"),
				tuple("Clean up internal notes", "external_task_canceled_clean_up_notes"),
				tuple("End canceled phase", "end_canceled_phase"),

				// At end of process
				tuple("End process", "end_process"));
	}

	@Test
	void test005_createProcessCanceledInDecisionPhase() throws JsonProcessingException, ClassNotFoundException {
		// === Start process ===
		final var startResponse = setupCall()
			.withServicePath(MUNICIPALITY_ID + "/process/start/409")
			.withHttpMethod(POST)
			.withExpectedResponseStatus(ACCEPTED)
			.sendRequest()
			.andReturnBody(StartProcessResponse.class);

		await()
			.until(() -> camundaClient.getHistoricProcessInstance(startResponse.getProcessId()).getState(), equalTo(COMPLETED));

		// Verify mocked stubs
		verifyAllStubs();

		// Verify process pathway.
		assertThat(getProcessInstanceRoute(startResponse.getProcessId()))
			.extracting(HistoricActivityInstanceDto::getActivityName, HistoricActivityInstanceDto::getActivityId)
			.doesNotHaveDuplicates()
			.containsExactlyInAnyOrder(
				tuple("Start process", "start_process"),

				// Actualization
				tuple("Start actualization phase", "start_actualization_phase"),
				tuple("Update phase", "external_task_actualization_update_phase_to_registered"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_received"),
				tuple("Check errand prerequisites", "external_task_actualization_check_errand_prerequisites"),
				tuple("Is prerequisites met?", "gateway_actualization_is_prerequisites_met"),
				tuple("Update phase", "external_task_actualization_update_phase_to_review"),
				tuple("Update errand status", "external_task_actualization_update_errand_status_to_under_review"),
				tuple("Check phase action", "external_task_actualization_check_phase_action"),
				tuple("Is phase action present?", "gateway_actualization_is_phase_action_present"),
				tuple("End actualization phase when completed", "end_actualization_phase_as_completed"),
				tuple("Actualization", "call_actualization_phase"),
				tuple("Is canceled in actualization phase", "gateway_canceled_in_actualization_phase"),

				// Investigation
				tuple("Start investigation phase", "start_investigation_phase"),
				tuple("Update phase", "external_task_investigation_update_phase"),
				tuple("Update errand status", "external_task_investigation_update_errand_status"),
				tuple("Check phase action", "external_task_investigation_check_phase_action"),
				tuple("Is phase action present?", "gateway_investigation_is_phase_action_present"),
				tuple("End investigation phase when completed", "end_investigation_phase_as_completed"),
				tuple("Investigation", "call_investigation_phase"),
				tuple("Is canceled in investigation phase", "gateway_canceled_in_investigation_phase"),

				// Decision
				tuple("Start decision phase", "start_decision_phase"),
				tuple("Update phase", "external_task_decision_update_phase"),
				tuple("Update errand status", "external_task_decision_update_errand_status"),
				tuple("Check if decision is made", "external_task_decision_check_decision"),
				tuple("Is final decision made or is process canceled?", "gateway_is_decision_final_or_process_canceled"),
				tuple("End decision phase when canceled", "end_decision_phase_as_canceled"),
				tuple("Decision", "call_decision_phase"),
				tuple("Is canceled in decision phase", "gateway_canceled_in_decision_phase"),

				//Canceled
				tuple("Canceled", "call_canceled_phase"),
				tuple("Start canceled phase", "start_canceled_phase"),
				tuple("Update phase", "external_task_canceled_update_phase_to_canceled"),
				tuple("Update errand status", "external_task_canceled_update_errand_status_to_canceled"),
				tuple("Clean up internal notes", "external_task_canceled_clean_up_notes"),
				tuple("End canceled phase", "end_canceled_phase"),

				// At end of process
				tuple("End process", "end_process"));
	}

	private void awaitActivity(String activityToWaitFor, String processId) {
		await()
			.ignoreExceptions()
			.atMost(DEFAULT_TESTCASE_TIMEOUT_IN_SECONDS, SECONDS)
			.until(() -> camundaClient.getEventSubscriptions().stream().filter(eventSubscription -> eventSubscription.getActivityId().equals(activityToWaitFor)).count(), equalTo(1L));

		// Update process
		setupCall()
			.withServicePath(MUNICIPALITY_ID + "/process/update/" + processId)
			.withHttpMethod(POST)
			.withExpectedResponseStatus(ACCEPTED)
			.withExpectedResponseBodyIsNull()
			.sendRequest();
	}
}
